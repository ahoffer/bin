#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# klog — follow logs from the first pod whose NAME contains a given substring.
#        • Re-attaches when the pod rolls.
#        • Auto-runs `tsh login` whenever Teleport credentials expire.
#
#   Defaults:  namespace = octo-mcs
#   Options :  -n <ns>    override namespace
#              -c <ctr>   choose container
#              -- ...     pass flags straight to `kubectl logs`
#
# Examples:
#   klog edge                            # default namespace
#   klog api -n prod                     # override namespace
#   klog api -c sidecar -- --tail=50
# ---------------------------------------------------------------------------

set -euo pipefail
trap 'exit' INT          # single ^C quits cleanly

# --------------------------- defaults & CLI parse ---------------------------
namespace=octo-mcs
container=""
extra_args=()
pattern=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -n|--namespace)  namespace=$2; shift 2;;
    -c|--container)  container=$2; shift 2;;
    --)              shift; extra_args+=("$@"); break;;
    -*)              extra_args+=("$1"); shift;;
    *)               pattern=$1; shift;;
  esac
done

[[ -z $pattern ]] && {
  echo "Usage: klog <substring> [-n namespace] [-c container] [-- <kubectl-logs flags>]" >&2
  exit 1
}

ns_args=(--namespace "$namespace")
[[ -n $container ]] && cont_args=(-c "$container") || cont_args=()

# --------------------------- helper: re-login -------------------------------
relogin() {
  echo "klog: Teleport creds appear expired — running 'tsh login'…" >&2
  if tsh login; then
    echo "klog: login successful." >&2
    return 0
  else
    echo "klog: 'tsh login' failed; retrying in 30 s…" >&2
    sleep 30
    return 1
  fi
}

# --------------------------- helper: list pods safely -----------------------
latest_matching_pod() {
  local output rc
  # we capture stderr separately so Teleport error msgs don’t pollute grep
  output=$(kubectl get pods "${ns_args[@]}" \
            --sort-by=.metadata.creationTimestamp -o name 2>/dev/null) || rc=$?
  rc=${rc:-0}

  if [[ $rc -eq 1 ]]; then   # Teleport exec plugin returns 1 on cert failure
    relogin || return 1      # attempt relogin; propagate failure upward
    return 2                 # signal caller to retry immediately
  fi

  # Filter & pick newest pod
  echo "$output" | grep -F -i "$pattern" | tail -n1 | cut -d/ -f2
}

# --------------------------- main follow loop -------------------------------
while true; do
  pod=""
  while [[ -z $pod ]]; do
    pod=$(latest_matching_pod) || {
      # return 1  → relogin failed (already slept 30 s)
      # return 2  → relogin succeeded, just retry immediately
      [[ $? -eq 1 ]] && continue
      true  # no-op; loop retries
    }

    if [[ -z $pod ]]; then
      echo "klog: none matching '$pattern' in ns '$namespace'; retrying in 5 s…" >&2
      sleep 5
    fi
  done

  echo "klog: streaming pod '$pod' in ns '$namespace'…" >&2

  # -- follow logs; detect Teleport failure on this call too -----------------
  set +e
  kubectl logs -f "${ns_args[@]}" "${cont_args[@]}" "${extra_args[@]}" "$pod"
  rc=$?
  set -e

  if [[ $rc -eq 1 ]]; then
    relogin && continue   # on success resume loop right away
    continue              # on failure relogin already slept 30 s
  fi

  echo "klog: pod '$pod' ended; re-scanning…" >&2
  sleep 1
done
