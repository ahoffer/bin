#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# klog — follow logs from the first pod whose NAME contains a given substring,
#        automatically re-attaching if the pod is replaced (e.g. on rollout).
#
#   • Defaults to namespace  octo-mcs
#   • Lets you override namespace with  -n <namespace>
#   • Lets you pick a specific container with  -c <container>
#   • Forwards any other flags directly to `kubectl logs`  after “--”
#
# Examples:
#   klog edge                       # follow first pod with “edge” in name
#   klog api -n prod                # same but namespace prod
#   klog api -c sidecar -- --tail=50 --since=10m
# ---------------------------------------------------------------------------

set -euo pipefail       # -e: exit on error, -u: error on unset var, -o pipefail: fail on pipe error
trap "exit" INT         # one Ctrl-C cleanly stops the whole script

# --------------------------- default values ---------------------------------
namespace=octo-mcs      # default namespace if -n/--namespace not given
container=""            # optional container name (set by -c/--container)
extra_args=()           # array for any extra `kubectl logs` flags
pattern=""              # substring to search for in pod names (positional arg)

# --------------------------- argument parser --------------------------------
while [[ $# -gt 0 ]]; do             # loop over all command-line args
  case "$1" in
    -n|--namespace)                  # override namespace
      namespace="$2"                 #   e.g. -n prod
      shift 2 ;;
    -c|--container)                  # choose container in multi-container pod
      container="$2"                 #   e.g. -c sidecar
      shift 2 ;;
    --)                              # everything after “--” goes verbatim to kubectl
      shift
      extra_args+=("$@")             #   collects rest of args in array
      break ;;                       #   leave the parsing loop
    -*)                              # any other flag (e.g. --since=5m) → pass through
      extra_args+=("$1")
      shift ;;
    *)                               # first non-flag token = search substring
      pattern="$1"
      shift ;;
  esac
done

# If user forgot to provide a substring → print help and exit
if [[ -z $pattern ]]; then
  echo "Usage: klog <substring> [-n namespace] [-c container] [-- <kubectl-logs flags>]" >&2
  exit 1
fi

# Pre-assemble arrays for kubectl invocations --------------------------------
ns_args=(--namespace "$namespace")    # namespace flag as array (safe with spaces)
cont_args=()                          # container flag array
[[ -n $container ]] && cont_args=(-c "$container")

# --------------------------- main follow loop -------------------------------
while true; do
  # 1. List pods in namespace, newest last (sort by creationTimestamp)
  # 2. Grep for our substring (case-insensitive, literal -F)
  # 3. Pick *last* match (tail -n1) so we follow the newest pod
  # 4. Cut off leading “pod/” prefix → bare pod name
  pod=$(
    kubectl get pods "${ns_args[@]}" \
      --sort-by=.metadata.creationTimestamp -o name |
    grep -F -i "$pattern" |
    tail -n1 |
    cut -d/ -f2 || true
  )

  # If no pod matches, wait 5 s and retry
  if [[ -z $pod ]]; then
    echo "klog: none matching '$pattern' in namespace '$namespace'; retrying in 5 s…" >&2
    sleep 5
    continue
  fi

  # Found a pod → stream its logs (-f) with any user-supplied flags
  echo "klog: streaming pod '$pod' in ns '$namespace'…" >&2
  kubectl logs -f "${ns_args[@]}" "${cont_args[@]}" "${extra_args[@]}" "$pod" || true

  # When `kubectl logs -f` ends (pod gone / Ctrl-C inside container):
  echo "klog: pod '$pod' ended; re-scanning…" >&2
  sleep 1                       # tiny pause before we loop and search again
done
