# Helper to generate dynamic /etc/hosts script
def generate_hosts_script(vm_map)
  vm_map.map do |name, ip|
    <<-EOS
      sudo sed -i.bak '/\\s#{name}$/d' /etc/hosts
      echo "#{ip} #{name}" | sudo tee -a /etc/hosts > /dev/null
    EOS
  end.join("\n")
end

# Shared Docker install script
DOCKER_SETUP_SCRIPT = <<-SHELL
  export DEBIAN_FRONTEND=noninteractive
  sudo apt-get update
  sudo apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    parallel \
    pigz
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io unzip
  sudo usermod -aG docker vagrant
SHELL

# Network configuration script
NETWORK_SETUP_SCRIPT = <<-SHELL
  # Disable firewall completely
  sudo systemctl stop ufw || true
  sudo systemctl disable ufw || true
  sudo ufw --force disable || true
  
  # Enable IP forwarding for better connectivity
  echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.conf
  sudo sysctl -p
  
  # Verify network connectivity
  echo "===== Network Configuration ====="
  ip addr
  echo "===== Testing Internet Access ====="
  ping -c 3 8.8.8.8 || echo "Warning: Internet access may not be working properly"
SHELL

# VM definition helper
def define_vm(config, name, ip, vm_map)
  config.vm.define name do |hyperv|
    hyperv.vm.hostname = name
    
    # First adapter: NAT for internet access (automatically created)
    
    # Second adapter: Host-only network for host-to-VM and VM-to-VM communication
    hyperv.vm.network "private_network", 
                      ip: ip, 
                      netmask: "255.255.255.0",
                      adapter: 2
    
    hyperv.vm.provider "virtualbox" do |vb|
      vb.name = name.upcase
      vb.memory = 1024 * 12
      vb.cpus = 8
      
      # Ensure VM has internet access through host
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      
      # Allow all traffic on the host-only interface
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end
    
    # Configure network and remove firewall
    hyperv.vm.provision "shell", inline: NETWORK_SETUP_SCRIPT
    
    # Install Docker
    hyperv.vm.provision "shell", inline: DOCKER_SETUP_SCRIPT
    
    # Set up hosts file for VM-to-VM communication
    hyperv.vm.provision "shell", inline: generate_hosts_script(vm_map)
    
    # Configure shared folder
    hyperv.vm.synced_folder(
      "./", "/home/vagrant/share",
      owner: "vagrant", group: "vagrant",
      mount_options: ["dmode=775,fmode=775"]
    )
  end
end

# Vagrant configuration block
Vagrant.configure("2") do |config|
  config.disksize.size = '250GB'
  config.vm.box = "ubuntu/jammy64"
  
  # Define VM IP mapping
  vm_ips = {
    "vm1" => "192.168.56.11",
    "vm2" => "192.168.56.12"
  }
  
  # Create the VMs
  vm_ips.each do |name, ip|
    define_vm(config, name, ip, vm_ips)
  end
  
  # Ensure host-only network exists with correct IP
  config.trigger.before :up do |trigger|
    trigger.info = "Ensuring host-only network is configured"
    trigger.ruby do
      # Create vboxnet0 if it doesn't exist
      unless system('VBoxManage list hostonlyifs | grep -q vboxnet0')
        puts "Creating vboxnet0 interface"
        system('VBoxManage hostonlyif create')
      end
      
      # Configure host-side IP (use 192.168.56.1)
      puts "Setting vboxnet0 IP to 192.168.56.1"
      system('VBoxManage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1 --netmask 255.255.255.0')
    end
  end
end
