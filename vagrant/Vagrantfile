# Two VMs with static IPs 
# Modified etc/hosts 
# Reach inet through host
# Host can reach the IPs

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  
  # Helper to generate dynamic /etc/hosts script
  def generate_hosts_script(vm_map)
    vm_map.map do |name, ip|
      <<-EOS
        sudo sed -i.bak '/\\s#{name}$/d' /etc/hosts
        echo "#{ip} #{name}" | sudo tee -a /etc/hosts > /dev/null
      EOS
    end.join("\n")
  end
  
  # Shared Docker install script
  $docker_setup = <<-SHELL
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update
    sudo apt-get install -y \
      ca-certificates \
      curl \
      gnupg \
      lsb-release
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io unzip
    sudo usermod -aG docker vagrant
  SHELL
  
  # VM definition helper
  def define_vm(config, name, ip, vm_map)
    config.vm.define name do |vm|
      vm.vm.hostname = name
      vm.vm.network "private_network", ip: ip
      vm.vm.provider "virtualbox" do |vb|
        vb.name = name.upcase
        vb.memory = 1024*16
        vb.cpus = 8
        
        # Ensure VM has internet access through host
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      end
      vm.vm.provision "shell", inline: $docker_setup
      vm.vm.provision "shell", inline: generate_hosts_script(vm_map)
    end
  end
  # Define VM IP mapping
  vm_ips = {
    "vm1" => "192.168.56.11",
    "vm2" => "192.168.56.12"
  }
  # Create the VMs
  vm_ips.each do |name, ip|
    define_vm(config, name, ip, vm_ips)
  end
end
