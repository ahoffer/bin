#!/usr/bin/env python3
"""
icmp-cast v1.3
Unified multicast/broadcast file sender.
Supports sending files via UDP to:
- Multicast (224.0.0.0 – 239.255.255.255)
- Broadcast (255.255.255.255 or subnet-specific)
"""

import sys
import os
import socket
import struct
import re
import glob

def usage():
    print("""
Usage:
  icmp-cast <host:port> <file1> [file2 ... fileN]

Arguments:
  <host:port>         Destination host/IP and UDP port
                      Host must be a multicast (224.0.0.0–239.255.255.255)
                      or broadcast address (e.g., 255.255.255.255).

  <file>              One or more files to send. Wildcards like *.xml are supported.

Examples:
  icmp-cast 239.2.3.1:6969 myfile.xml
  icmp-cast 255.255.255.255:6969 *.xml
  icmp-cast myhost.local:6969 myfile.xml

Wildcard Notes:
  - Wildcards (e.g., ) are expanded by your shell before the script runs.
  - To handle large batches or avoid "argument list too long" errors, use a loop:

      for f in *.xml; do
          icmp-cast 239.2.3.1:6969 ""
      done

  - Quoting wildcards (e.g., "*.xml") disables expansion and will likely cause errors
    unless handled within the script.
""")
    sys.exit(1)

def is_multicast(ip):
    try:
        first_octet = int(ip.split('.')[0])
        return 224 <= first_octet <= 239
    except ValueError:
        return False

def is_broadcast(ip):
    return ip == '255.255.255.255'

def parse_target(target):
    pattern = r'^([a-zA-Z0-9.\-]+):(\d+)$'
    match = re.match(pattern, target)
    if not match:
        print(f"Error: Invalid target format: {target}")
        usage()
    host = match.group(1)
    port = int(match.group(2))
    if not 1 <= port <= 65535:
        print(f"Error: Invalid port number: {port}")
        usage()
    return host, port

def send_file(file_path, sock, ip, port, mode):
    try:
        with open(file_path, 'rb') as f:
            while True:
                chunk = f.read(1024)
                if not chunk:
                    break
                sock.sendto(chunk, (ip, port))
        print(f"{mode.capitalize()} complete: {file_path} → {ip}:{port}")
    except Exception as e:
        print(f"Error sending {file_path}: {e}")

def main():
    if len(sys.argv) < 3:
        usage()

    target = sys.argv[1]
    raw_file_args = sys.argv[2:]

    ip, port = parse_target(target)

    # Expand wildcards and collect file paths
    files = []
    for arg in raw_file_args:
        expanded = glob.glob(arg)
        if not expanded:
            print(f"Warning: No match for {arg}")
        files.extend(expanded)

    if not files:
        print("Error: No valid files to send.")
        sys.exit(1)

    # Determine mode
    if is_multicast(ip):
        mode = 'multicast'
    elif is_broadcast(ip):
        mode = 'broadcast'
    else:
        print(f"Error: IP address {ip} is neither multicast nor broadcast.")
        sys.exit(1)

    # Set up socket
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        if mode == 'multicast':
            ttl = struct.pack('b', 1)
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)
        elif mode == 'broadcast':
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

        for file_path in files:
            if os.path.isfile(file_path):
                send_file(file_path, sock, ip, port, mode)
            else:
                print(f"Skipping non-file: {file_path}")

    except Exception as e:
        print(f"Socket setup failed: {e}")
        sys.exit(1)
    finally:
        sock.close()

if __name__ == "__main__":
    main()

