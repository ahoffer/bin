#!/usr/bin/env bash
set -euo pipefail

# =============================================================================
# scan‐cidr-ssh.sh
#
# Usage:
#   scan-cidr-ssh.sh <ANY_IP_in_CIDR>
#     e.g. scan-cidr-ssh.sh 10.32.40.14/24
#
# What it does:
#   1) Takes any IPv4 plus /prefix (even if the IPv4 is not the network base).
#   2) Masks off the rightmost bits to compute the true network base.
#   3) Iterates over every “host” in that block (skip .0/.255 etc. unless /31 or /32).
#   4) For each IP, it:
#        • pings with a 1 s timeout
#        • then immediately (no matter the ping result) tries nc -zvw1 port 22 (1 s timeout).
#   5) Prints a single line per IP, showing both PING status and SSH status.
#
#   “Even if the host is not pingable, check it for SSH.”
# =============================================================================

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <IP>/<prefix>    e.g. $0 10.32.40.14/24"
  exit 1
fi

input_cidr="$1"

# 1) Validate “x.x.x.x/y”
if ! [[ $input_cidr =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$ ]]; then
  echo "Invalid CIDR format: $input_cidr"
  echo "Expected something like 192.168.1.55/24"
  exit 1
fi

# 2) Split into IP-part and prefix
ip_part="${input_cidr%%/*}"
prefix="${input_cidr##*/}"

# 3) Ensure prefix is in [0..32]
if (( prefix < 0 || prefix > 32 )); then
  echo "CIDR prefix out of range: $prefix"
  exit 1
fi

# -----------------------------------------------------------------------------
# Helpers: ip2int / int2ip
# -----------------------------------------------------------------------------
ip2int() {
  local IFS=. a b c d
  read -r a b c d <<< "$1"
  echo $(( (a << 24) | (b << 16) | (c << 8) | d ))
}

int2ip() {
  local ip_int=$1
  printf '%d.%d.%d.%d' \
    $(( (ip_int >> 24) & 255 )) \
    $(( (ip_int >> 16) & 255 )) \
    $(( (ip_int >> 8)  & 255 )) \
    $((  ip_int        & 255 ))
}

# -----------------------------------------------------------------------------
# 4) Compute network base + host‐range
# -----------------------------------------------------------------------------
ip_int=$(ip2int "$ip_part")
mask_int=$(( (0xFFFFFFFF << (32 - prefix)) & 0xFFFFFFFF ))
network_int=$(( ip_int & mask_int ))
num_addrs=$(( 1 << (32 - prefix) ))

if (( prefix == 32 )); then
  first_ip=$network_int
  last_ip=$network_int
elif (( prefix == 31 )); then
  # /31 → both are valid hosts (no separate broadcast per RFC3021)
  first_ip=$network_int
  last_ip=$(( network_int + 1 ))
else
  # Normal: skip network (.0) and broadcast (.last)
  first_ip=$(( network_int + 1 ))
  last_ip=$(( network_int + num_addrs - 2 ))
fi

network_str=$(int2ip "$network_int")
first_str=$(int2ip "$first_ip")
last_str=$(int2ip "$last_ip")

echo "Input:    $input_cidr"
echo "Network:  $network_str/$prefix"
echo "Hosts:    $first_str – $last_str    (total $(( last_ip - first_ip + 1 )) hosts)"
echo

# -----------------------------------------------------------------------------
# Optional: limit concurrent background jobs so we don’t blow out ulimit / CPU
# -----------------------------------------------------------------------------
MAX_CONCURRENT=100
# You can raise or lower this if you want more or fewer simultaneous probes.

# -----------------------------------------------------------------------------
# 5) scan_host(): for a single IP, do 1 s ping + 1 s nc‐ssh check
# -----------------------------------------------------------------------------
scan_host() {
  local ip_addr="$1"
  local ping_res ssh_res

  # 1s timeout ping
  if ping -c1 -W1 "$ip_addr" &>/dev/null; then
    ping_res="OK"
  else
    ping_res="FAIL"
  fi

  # 1s timeout for SSH (zero-I/O TCP connect)
  if nc -zvw1 "$ip_addr" 22 &>/dev/null; then
    ssh_res="OPEN"
  else
    ssh_res="CLOSED"
  fi

 if  [[ $ping_res == "OK" || $ssh_res == "OPEN" ]]; then  
  printf '%-15s → PING:%-4s SSH:%-6s\n' "$ip_addr" "$ping_res" "$ssh_res"
 fi 
}

# -----------------------------------------------------------------------------
# 6) Iterate from first_ip to last_ip, spawning background job per IP
# -----------------------------------------------------------------------------
for ip_num in $(seq "$first_ip" "$last_ip"); do
  ip_candidate=$(int2ip "$ip_num")

  # throttle: wait if we already have $MAX_CONCURRENT jobs running
  while (( $(jobs -r | wc -l) >= MAX_CONCURRENT )); do
    sleep 0.05
  done

  scan_host "$ip_candidate" &
done

# 7) Wait for all background jobs to finish
wait

