#!/usr/bin/env bash

set -euo pipefail

# Kill all child jobs on Ctrl+C
trap 'echo "Interrupted. Killing all jobs..."; kill 0; exit 1' SIGINT

ARCHIVE="${1:-}"

if [[ -z "$ARCHIVE" || ! -f "$ARCHIVE" ]]; then
  echo "Usage: $0 <archive-file.tar.gz|archive-file.zip>"
  exit 1
fi

echo "Extracting archive: $ARCHIVE"

EXT="${ARCHIVE##*.}"
EXTRACT_DIR="."

# Extract based on extension
case "$EXT" in
  gz)
    if command -v pigz &>/dev/null; then
      echo "Using pigz for fast decompression..."
      pigz -dc "$ARCHIVE" | tar -xvf - -C "$EXTRACT_DIR"
    else
      echo "Warning: pigz not found. Falling back to single-threaded gzip." >&2
      tar -xvzf "$ARCHIVE" -C "$EXTRACT_DIR"
    fi
    ;;
  zip)
    unzip -o "$ARCHIVE" -d "$EXTRACT_DIR"
    ;;
  *)
    echo "Unsupported archive format: .$EXT"
    exit 1
    ;;
esac

# Find all tar files and load them
mapfile -t TARFILES < <(find "$EXTRACT_DIR" -maxdepth 1 -name '*.tar')

if [[ ${#TARFILES[@]} -eq 0 ]]; then
  echo "No .tar files found after extraction."
  exit 1
fi

echo "Found ${#TARFILES[@]} image tarballs. Loading..."

load_image() {
  local tarfile="$1"
  echo "Loading image from $tarfile"
  docker load -i "$tarfile"
}

export -f load_image

# Use parallel if available
if command -v parallel &>/dev/null; then
  printf "%s\n" "${TARFILES[@]}" | parallel --will-cite load_image {}
else
  echo "Warning: GNU parallel not found. Falling back to sequential loading." >&2
  for tar in "${TARFILES[@]}"; do
    load_image "$tar"
  done
fi

echo "All images loaded successfully!"

