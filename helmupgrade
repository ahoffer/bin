#!/usr/bin/env bash
#
# Rebuild Helm charts from /projects/cx-search and redeploy them to the
# current Kubernetes cluster AND CURRENT NAMESPACE
#

set -euo pipefail

# Check for one argument and that it's a valid directory
if [[ $# -ne 1 || ! -d "$1" ]]; then
  echo "Usage: $0 <directory>"
  echo "  For example, \"$0 /projects/cx-search/distributions/octocx/cx-helm-chart\""
  exit 1
fi

chart_root="$1"
k8_ctx="$(kubectl config current-context | xargs kubectl config get-contexts | tail -n 1 | tr -s ' ')"
context_name=$(echo "$k8_ctx" | cut -d ' ' -f2)
namespace=$(echo "$k8_ctx" | cut -d ' ' -f5)
ingress_ip=$(kubectl get nodes -o yaml | awk '/alpha\.kubernetes\.io\/provided-node-ip:/ {print $2; exit}')
pause_seceonds=60

wait_with_progress() {
  local seconds=$1
  local text="$2"
  for ((i=1; i<=seconds; i++)); do
    printf "\r%s %ds: [%-*s] %ds" "$text" "$1" "$seconds" "$(head -c $i < /dev/zero | tr '\0' '#')" "$i"
    sleep 1
  done
}

print_box() {
  local IFS=$'\n'
  local -a lines #declare array
  lines=($1)     #split only on newlines
  local width=0
  for l in "${lines[@]}"; do
    ((${#l} > width)) && width=${#l}
  done

  # UTF-8 borders (uncomment ASCII if your terminal can’t render them).
  local tl='╔' tr='╗' bl='╚' br='╝' hr='═' vr='║'
  # ASCII borders
  local tl='+' tr='+' bl='+' br='+' hr='-' vr='|'

  printf "%s" "$tl"
  printf "%${width}s" | tr ' ' "$hr"
  printf "%s\n" "$tr"
  for l in "${lines[@]}"; do
    printf "%s%-*s%s\n" "$vr" "$width" "$l" "$vr"
  done
  printf "%s" "$bl"
  printf "%${width}s" | tr ' ' "$hr"
  printf "%s\n" "$br"
}

print_info() {
  printf -v banner "context=%s\nnamespace=%s\ingress=%s " $context_name $namespace $ingress_ip
  print_box "$banner"
}

main() {

#  print_info
  cd "$chart_root"
  printf "...Building packages for namespace \"%s\" with ingress \"%s\"..." $namespace $ingress_ip
  mvn clean package -Dfqdn="$namespace" -Dingress="$ingress_ip" >/dev/null
#  printf "...Uninstalling helm releases for namesapce \"%s\"\n" $namespace
#  helm uninstall local-only third-party core &>/dev/null || true
#  wait_with_progress $pause_seceonds "Giving K8s chance to clear its head for"
  printf "\n...Installing helm packages..."
  helm upgrade local-only ./target/helm/cx-local-only-1.19.0-SNAPSHOT.tgz >/dev/null
  helm upgrade third-party ./target/helm/cx-third-party-1.19.0-SNAPSHOT.tgz >/dev/null
  helm upgrade core ./target/helm/cx-core-1.19.0-SNAPSHOT.tgz >/dev/null
  printf "  Done!\n"
  printf "\nCurrent state is...\n"
  helm list
}

main "$@"
