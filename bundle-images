#!/usr/bin/env bash
set -euo pipefail

# Reads image tags from stdin, dedupes, saves them to tar.
#
# Expected format is one image per line:
#   postgres:13.4
#   qdrant/qdrant:v1.13.3-gpu-nvidia
#   registry.octo-cx-prod.runshiftup.com/octo-cx/common/docker-hub/coturn:25.9.18-edge-alpine
#
# Examples:
#  echo "postgres:13.4" | save-images -o /path/container-images.tar
#  save-images < images.manifest

archive_bundle_file="/tmp/container-images-$(date +%Y%m%d%H%M%S).tar"

while [[ $# -gt 0 ]]; do
  case $1 in
  -o|--output) archive_bundle_file="$2"; shift 2 ;;
  -h|--help) echo "Usage: $0 [-o|--output file]"; exit 0 ;;
  *) echo "Usage: $0 [-o|--output file]" >&2; exit 2 ;;
  esac
done

# normalize output path
if [[ "$archive_bundle_file" != /* ]]; then
  archive_bundle_file="$(pwd)/$archive_bundle_file"
fi

# ensure output dir exists
mkdir -p "$(dirname "$archive_bundle_file")"


save_image () {
  image=$1
  safe_filename="$(printf '%s' "$image" | tr '/:' '__')"
  image_file="$tmpdir/${safe_filename}.tar"
  docker pull "$image" >/dev/null
  docker save -o "$image_file" "$image"
}

# strip comments/blanks, dedupe
images=$(grep -vE '^\s*(#|$)' | sed 's/^\s*//;s/\s*$//' | sort -u)

# fresh workspace
tmpdir="$(mktemp -d)"
echo "Created temp dir $tmpdir"

echo "Starting pull and save..."
while IFS= read -r image_spec; do
  [[ -z "$image_spec" ]] && continue
  echo "  $image_spec"
save_image "$image_spec" &
done <<<"$images"

#synchronize
echo "Waiting for pull and save to complete..."
wait
echo "Done"

echo 'Creating tar archive (slow)'
( cd "$tmpdir" && tar -cf "$archive_bundle_file" *.tar )

# compressing large files is not always the best thing to do
# zstd -T0 -q -f --rm "$archive_bundle_file" && archive_bundle_file="${archive_bundle_file}.zst"

echo "Created $archive_bundle_file in ${SECONDS} seconds"
